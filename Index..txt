<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Fast and Safe</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@6.10.0/dist/ethers.umd.min.js"></script>
  <script src="https://unpkg.com/@walletconnect/web3-provider@1.8.0/dist/umd/index.min.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #111827;
      color: #f9fafb;
      padding: 20px;
      max-width: 600px;
      margin: auto;
    }
    h1 {
      font-size: 28px;
      color: #3b82f6;
    }
    button {
      padding: 10px 20px;
      margin-top: 10px;
      background: linear-gradient(to right, #3b82f6, #06b6d4);
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
    }
    .section {
      margin-top: 30px;
      padding: 20px;
      background: #1f2937;
      border-radius: 8px;
    }
    input {
      width: 100%;
      padding: 10px;
      margin-top: 10px;
      font-size: 16px;
      border-radius: 6px;
      border: none;
    }
    .status {
      margin-top: 10px;
      font-size: 14px;
    }
  </style>
</head>
<body>

  <h1>⚡ Fast and Safe</h1>
  <p>Web3 dApp — Connect your wallet and interact securely.</p>

  <div class="section">
    <button id="connect">🔌 Connect Wallet</button>
    <div id="walletAddress" class="status"></div>
    <div id="networkInfo" class="status"></div>
  </div>

  <div class="section">
    <h2>🌐 Network Selector</h2>
    <button onclick="switchNetwork('0x1')">Ethereum</button>
    <button onclick="switchNetwork('0x13881')">Polygon Mumbai</button>
    <button onclick="switchNetwork('0xaa36a7')">Sepolia</button>
  </div>

  <div class="section">
    <h2>🪙 ERC-20 Token Balance</h2>
    <button id="getBalance">Get Balance</button>
    <div id="balanceOutput" class="status"></div>
  </div>

  <div class="section">
    <h2>🖼️ Mint NFT</h2>
    <button id="mintBtn">Mint NFT</button>
    <div id="mintStatus" class="status"></div>
  </div>

  <script>
    let provider, signer;

    // 🔁 Replace these addresses with yours!
    const nftContractAddress = "0xYourERC721Address";
    const tokenContractAddress = "0xYourERC20Address";

    const nftAbi = [
      "function safeMint(address to) public"
    ];

    const tokenAbi = [
      "function balanceOf(address owner) view returns (uint256)"
    ];

    async function connectWallet() {
      try {
        if (window.ethereum) {
          // MetaMask
          await window.ethereum.request({ method: 'eth_requestAccounts' });
          provider = new ethers.BrowserProvider(window.ethereum);
        } else {
          // WalletConnect
          const wc = new WalletConnectProvider.default({
            rpc: {
              1: "https://rpc.ankr.com/eth",
              11155111: "https://rpc.sepolia.org",
              80001: "https://rpc-mumbai.maticvigil.com"
            },
          });
          await wc.enable();
          provider = new ethers.BrowserProvider(wc);
        }

        signer = await provider.getSigner();
        const addr = await signer.getAddress();
        document.getElementById("walletAddress").innerText = `✅ Wallet: ${addr}`;
        updateNetwork();
      } catch (err) {
        alert("❌ Connection Error: " + err.message);
      }
    }

    async function updateNetwork() {
      const net = await provider.getNetwork();
      document.getElementById("networkInfo").innerText = `🔗 Network: ${net.name} (${net.chainId})`;
    }

    async function switchNetwork(chainId) {
      try {
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{ chainId }],
        });
        updateNetwork();
      } catch (err) {
        alert('❌ Switch failed: ' + err.message);
      }
    }

    document.getElementById("connect").onclick = connectWallet;

    document.getElementById("getBalance").onclick = async () => {
      try {
        const token = new ethers.Contract(tokenContractAddress, tokenAbi, signer);
        const user = await signer.getAddress();
        const balance = await token.balanceOf(user);
        document.getElementById("balanceOutput").innerText = `💰 Balance: ${ethers.formatUnits(balance, 18)}`;
      } catch (err) {
        document.getElementById("balanceOutput").innerText = `❌ Error: ${err.message}`;
      }
    };

    document.getElementById("mintBtn").onclick = async () => {
      try {
        const nft = new ethers.Contract(nftContractAddress, nftAbi, signer);
        const user = await signer.getAddress();
        const tx = await nft.safeMint(user);
        document.getElementById("mintStatus").innerText = `⏳ Minting TX: ${tx.hash}`;
        await tx.wait();
        document.getElementById("mintStatus").innerText = `✅ Minted! TX: ${tx.hash}`;
      } catch (err) {
        document.getElementById("mintStatus").innerText = `❌ Mint error: ${err.message}`;
      }
    };
  </script>

</body>
</html>